{"version":3,"sources":["logo.svg","SearchBox.js","AppDesc.js","SearchResult.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","padding","display","alignItems","width","input","marginLeft","spacing","flex","iconButton","divider","height","margin","SearchBox","props","classes","useState","searchValue","setSearchValue","Paper","component","className","InputBase","placeholder","inputProps","value","onChange","e","target","IconButton","type","onClick","preventDefault","setIsSearched","query_params","URLSearchParams","search","fetch","method","headers","then","response","json","data","console","log","setResult","AppDesc","i","result","style","rows","columns","field","headerName","editable","pageSize","App","isSearched","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAAe,I,wDCOTA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,QAAS,UACTC,QAAS,OACTC,WAAY,SACZC,MAAO,KAEXC,MAAO,CACHC,WAAYP,EAAMQ,QAAQ,GAC1BC,KAAM,GAEVC,WAAY,CACRR,QAAS,IAEbS,QAAS,CACLC,OAAQ,GACRC,OAAQ,OAID,SAASC,EAAUC,GAC9B,IAAMC,EAAUlB,IAChB,EAAsCmB,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KA8BA,OACI,eAACC,EAAA,EAAD,CAAOC,UAAU,OAAOC,UAAWN,EAAQf,KAA3C,UAII,cAACsB,EAAA,EAAD,CACID,UAAWN,EAAQV,MACnBkB,YAAY,0BACZC,WAAY,CAAE,aAAc,2BAC5BC,MAAOR,EACPS,SAtCqB,SAACC,GAC9BT,EAAeS,EAAEC,OAAOH,UAuCpB,cAACI,EAAA,EAAD,CAAYC,KAAK,SAAST,UAAWN,EAAQN,WAAYsB,QAhCjD,SAACJ,GACbA,EAAEK,iBACFlB,EAAMmB,eAAc,GACpB,IAGMC,EAAe,IAAIC,gBAHV,CACXC,OAAQnB,IAQZoB,MAAM,0CAA4CH,EAL3B,CACnBI,OAAQ,MACRC,QAAS,CAAE,eAAgB,sBAI1BC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACFC,QAAQC,IAAIF,GACZ7B,EAAMgC,UAAUH,OAgBuD,aAAW,SAAtF,SACI,cAAC,IAAD,SCrED,SAASI,IACpB,OACI,oF,oBCAO,SAASlC,EAAUC,GAC9B,IADqC,EAgBjCkC,EAAI,EAhB6B,cAiBrBlC,EAAMmC,QAjBe,IAiBrC,2BAA8B,SACvB,GAASD,EACZA,KAnBiC,8BAsBrC,OACI,qBAAKE,MAAO,CAAEvC,OAAQ,IAAKP,MAAO,QAAlC,SACI,cAAC,IAAD,CACI+C,KAAMrC,EAAMmC,OACZG,QAzBI,CACZ,CACIC,MAAO,OACPC,WAAY,OACZlD,MAAO,IACPmD,UAAU,GAEd,CAAEF,MAAO,SAAUC,WAAY,SAAUlD,MAAO,KAChD,CACEiD,MAAO,MACPC,WAAY,MACZlD,MAAO,IACPmD,UAAU,IAcJC,SAAU,OCLXC,MAnBf,WACI,MAAoCzC,oBAAS,GAA7C,mBAAO0C,EAAP,KAAmBzB,EAAnB,KACA,EAA4BjB,mBAAS,MAArC,mBAAOiC,EAAP,KAAeH,EAAf,KAEA,OACI,sBAAKzB,UAAU,MAAf,UACI,wBAAQA,UAAU,aAAlB,SACI,gDAEJ,iCACI,cAACR,EAAD,CAAWoB,cAAgBA,EAAgBa,UAAYA,KACrDY,GAAc,cAACX,EAAD,IACJ,OAAXE,GAAmB,cAAC,EAAD,CAAcA,OAASA,WCR5CU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d83832f4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport IconButton from '@material-ui/core/IconButton';\nimport SearchIcon from '@material-ui/icons/Search';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: '2px 4px',\n        display: 'flex',\n        alignItems: 'center',\n        width: 400,\n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    iconButton: {\n        padding: 10,\n    },\n    divider: {\n        height: 28,\n        margin: 4,\n    },\n}));\n\nexport default function SearchBox(props) {\n    const classes = useStyles();\n    const [searchValue, setSearchValue] = useState(\"\");\n\n    const handleSearchInputChanges = (e) => {\n        setSearchValue(e.target.value);\n    }\n\n    const resetInputField = () => {\n        setSearchValue(\"\")\n    }\n\n    const getBpms = (e) => {\n        e.preventDefault()\n        props.setIsSearched(true)\n        const params = { // 渡したいパラメータをJSON形式で書く\n            search: searchValue\n        };\n        const query_params = new URLSearchParams(params)\n        const requestOptions = {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' },\n        };\n        // fetch('http://localhost:3000/api?' + query_params, requestOptions)\n        fetch('https://bpm-searcher.herokuapp.com/api?' + query_params, requestOptions)\n            .then(response => response.json())\n            .then(data => {\n                console.log(data)\n                props.setResult(data)\n            });\n    }\n\n    return (\n        <Paper component=\"form\" className={classes.root}>\n            {/* <IconButton className={classes.iconButton} aria-label=\"menu\">\n                <MenuIcon />\n            </IconButton> */}\n            <InputBase\n                className={classes.input}\n                placeholder=\"Search Songs or Artists\"\n                inputProps={{ 'aria-label': 'search songs or artists' }}\n                value={searchValue}\n                onChange={handleSearchInputChanges}\n            />\n            <IconButton type=\"submit\" className={classes.iconButton} onClick={getBpms} aria-label=\"search\">\n                <SearchIcon />\n            </IconButton>\n        </Paper>\n    );\n}","import React, { useState } from 'react';\n\n\nexport default function AppDesc() {\n    return (\n        <div>this can be used for searching bpm of given songs</div>\n    );\n}","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { DataGrid } from '@material-ui/data-grid';\n\n\nexport default function SearchBox(props) {\n    const columns = [\n        {\n            field: 'song',\n            headerName: 'Song',\n            width: 300,\n            editable: true,\n        },\n        { field: 'artist', headerName: 'ARTIST', width: 150 },\n        {\n          field: 'bpm',\n          headerName: 'BPM',\n          width: 150,\n          editable: true,\n        }\n    ]\n    let i = 1;\n    for (let res of props.result) {\n        res[\"id\"] = i\n        i++\n    }\n\n    return (\n        <div style={{ height: 500, width: '100%' }}>\n            <DataGrid\n                rows={props.result}\n                columns={columns}\n                pageSize={10}\n                // checkboxSelection\n                // disableSelectionOnClick\n                // style={{color: '#FFFFFF'}}\n            />\n        </div>\n    );\n}","import React, { useState } from 'react';\nimport logo from './logo.svg';\n// import './App.css';\nimport SearchBox from './SearchBox'\nimport AppDesc from './AppDesc'\nimport SearchResult from './SearchResult'\n\n\nfunction App() {\n    const [isSearched, setIsSearched] = useState(false);\n    const [result, setResult] = useState(null);\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <h1>BPM SEARCHER</h1>\n            </header>\n            <body>\n                <SearchBox setIsSearched={ setIsSearched } setResult={ setResult }/>\n                {!isSearched && <AppDesc />}\n                {result !== null && <SearchResult result={ result }/>}\n            </body>\n            \n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}